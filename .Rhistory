cohortTable = "",
cohortId = 747,
washoutPeriod = 0,
covariateSettings = covariateSettingsList,
outcomeDatabaseSchema = cohortsDatabaseSchema,
outcomeTable = "",
outcomeIds = 748,
cdmVersion = cdmVersion)
# Some SQL to construct the covariate:
sql <- paste(
'SELECT',
'TOP 100',
" @row_id_field AS row_id,",
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = @note_concept_id',
'{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}'
)
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
note_concept_id = noteConceptId,
row_id_field = rowIdField,
#sampleSize=sampleSize,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
rawCovariates <- DatabaseConnector::querySql.ffdf(connection, sql)
colnames(rawCovariates)<-tolower(colnames(rawCovariates))
row_id              <-  rawCovariates$row_id
covariates_value    <- rawCovariates$covariate_id
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
noteConceptId = 44814637
cdmVersion = "5"
rowIdField = "subject_id"
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
rawCovariates <- DatabaseConnector::querySql.ffdf(connection, sql)
colnames(rawCovariates)<-tolower(colnames(rawCovariates))
row_id              <-  rawCovariates$row_id
covariates_value    <- rawCovariates$covariate_id
covariatevalue <- covariates_value
result_xml_df <- NoteXmlParser(rowid,covariatesvalue)
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param rowid,covariatesvalue
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' NoteXmlParser()
NoteXmlParser <- function(rowid,covariatesvalue){
numCores <- parallel::detectCores() - 1
myCluster <- parallel::makeCluster(numCores)
diagnosis_list <- parallel::parLapply(cl = myCluster, X = covariatesvalue, fun = XML_PARSING)
result_xml_list <- parallel::parLapply(cl = myCluster, X = diagnosis_list, fun = DIAG_PROCESSING)
for (i in 1:length(result_xml_list)){
result_xml_list[[i]][,'row_id'] <- rowid[i]
}
max_col <- 0
for(i in 1:length(result_xml_list)){
col_value <- length(result_xml_list[[i]])
if(max_col < col_value){
max_col <- col_value
}
}
result_tmp_df <- data.frame(stringsAsFactors = F)
result_xml_df <- data.frame(stringsAsFactors = F)
div = 1000
flag <- 0
if(div >= length(result_xml_list)){
for(i in 1:length(result_xml_list)){
if(length(result_xml_list[[i]]) == max_col){
result_tmp_df <- rbind(result_tmp_df,result_xml_list[[i]])
}
}
flag <- 1
result_xml_df <- result_tmp_df
}
if(flag == 0 ){
for(i in 1:length(result_xml_list)){
if(length(result_xml_list[[i]]) == max_col){
result_tmp_df <- rbind(result_tmp_df,result_xml_list[[i]])
if(i%%div ==0 & i>=div){
result_xml_df <- rbind(result_xml_df,result_tmp_df)
result_tmp_df <- data.frame(stringsAsFactors = FALSE)
}
}
else{
}
}
result_xml_df <- rbind(result_xml_df,result_tmp_df)
}
# 클러스터 중지
parallel::stopCluster(myCluster)
return(result_xml_df)
}
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param xmlList
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' XML_PARSING()
XML_PARSING <- function(xmlList){
pattern_start <- as.vector(gregexpr('<[^/<>]+>[^<>]+<\\/[^<>]+>',xmlList)[[1]])
pattern_length <- as.vector(attr(gregexpr('<[^/<>]+>[^<>]+<\\/[^<>]+>',xmlList)[[1]],'match.length'))
pattern_end <- pattern_start+pattern_length-1
xml_data = rep(NA,length(pattern_start))
for(i in 1:length(pattern_start)){
xml_data[i] <- substr(xmlList,pattern_start[i],pattern_end[i])
}
return(xml_data)
}
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param diag_list
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' DIAG_PROCESSING()
DIAG_PROCESSING <- function(diag_list){
tag_vector  <- as.vector(regexpr('>',diag_list))
text_vector <- as.vector(regexpr('</',diag_list))
tag_data_vector <- substr(diag_list,1,tag_vector)
text_data_vector <- substr(diag_list,tag_vector+1,text_vector-1)
first_tag_vector <- as.vector(regexpr(tag_data_vector[1],tag_data_vector))
data =c()
for (i in 1:length(first_tag_vector)){
if (first_tag_vector[i] == 1){
data[i] <- i
}
}
data <- data[!is.na(data)]
data[length(data)+1] <- length(first_tag_vector)+1
df <- data.frame(stringsAsFactors = FALSE)
for (i in unique(tag_data_vector)){
df[i] <- character(0)
}
cnt <- 1
for (i in 1:(length(data)-1)){
val <- (data[i+1])-(data[i])
for (k in 1:val){
df[i,tag_data_vector[cnt]] <- text_data_vector[cnt]
cnt <- cnt+1
}
}
return(df)
}
result_xml_df <- NoteXmlParser(rowid,covariatesvalue)
covariatesvalue <- covariates_value
result_xml_df <- NoteXmlParser(rowid,covariatesvalue)
covariatesvalue <- covariates_value
result_xml_df <- NoteXmlParser(rowid,covariatesvalue)
covariatesvalue <- covariates_value
rowid <- row_id
result_xml_df <- NoteXmlParser(rowid,covariatesvalue)
result_xml_df <- NoteXmlParser(rowid,covariatesvalue)
View(result_xml_df)
doc.df <- LanguagePreProcessingFunction(result_xml_df)
numCores <- parallel::detectCores() - 1
myCluster <- parallel::makeCluster(numCores)
search_df <- result_xml_df[result_xml_df$`<MN>`=='현병력',]
tag ='<TD>'
search_df[,tag][is.na(search_df[,tag])] <- ""
for (i in nrow(search_df):1){
if(search_df[i,tag] == ""){
search_df <- search_df[-i,]
}
}
xml_df <- search_df[tag]
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param xmldf
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' NLP_PROCESSING()
NLP_PROCESSING <- function(xmldf){
xmldf <- gsub('&#x0D;', " ", xmldf)
xmldf <- gsub('&lt;', " ", xmldf)
xmldf <- gsub('&gt;', " ", xmldf)
xmldf <- gsub('&amp;', " ", xmldf)
xmldf <- gsub('&quot;', " ", xmldf)
xmldf <- gsub("[\\]","", xmldf)
xmldf <- gsub("[\\+]|[\\{]|[\\}]|[\\(]|[\\)]|[\\<]|[\\>]"," ", xmldf)
xmldf <- gsub("\\[","", xmldf)
xmldf <- gsub("\\]","", xmldf)
xmldf <- gsub("\\/","", xmldf)
xmldf <- gsub("\\'"," ", xmldf)
xmldf <- gsub('\\"'," ", xmldf)
xmldf <- gsub("[~!@#$><%≥=^&×*-:●★¤]"," ", xmldf)
xmldf <- gsub('“', " ", xmldf)
xmldf <- gsub('”', " ", xmldf)
xmldf <- gsub('‘', " ", xmldf)
xmldf <- gsub('’', " ", xmldf)
xmldf <-xmldf <- gsub(',', " ", xmldf)
xmldf<- tolower(xmldf)
xmldf <- gsub('[ㅏ-ㅣ]*','',xmldf)
xmldf <- gsub('[ㄱ-ㅎ]*','',xmldf)
pos_start <- as.vector(gregexpr('[^가-힣 ]*[A-Za-z]+[^가-힣 ]*',xmldf)[[1]])
pos_length <- as.vector(attr(gregexpr('[^가-힣 ]*[A-Za-z]+[^가-힣 ]*',xmldf)[[1]],'match.length'))
pos_end <- pos_start+pos_length-1
word_data <- c()
if(length(pos_start) > 0){
for(i in 1:length(pos_start)){
word_data[i] <- substr(xmldf,pos_start[i],pos_end[i])
}
new_word_data <- paste("",toupper(word_data),"")
for(i in 1:length(word_data)){
xmldf <- sub(word_data[i],new_word_data[i],xmldf)
}
}
xmldf<- tolower(xmldf)
xmldf <- stringr::str_replace_all(xmldf,"[[:space:]]{1,}"," ")
xmldf <- paste(xmldf,'.',sep = '')
return(xmldf)
}
word_df <- data.frame('diagnosis' = parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING),stringsAsFactors = F)
View(word_df)
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param word_df
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' POS_ANALYSIS()
POS_ANALYSIS <- function(word_df){
word_list <- KoNLP::SimplePos22(word_df)
#result_word_list<-strsplit(word_df," ")
if(length(word_list) ==1){
word_vector <- word_list[[1]]
result_word_list <- c(word_vector)
}
else{
word_vector <- word_list[[1]]
for (k in 2:length(word_list)){
word_vector <- paste(word_vector,'+',word_list[[k]],sep = '')
}
result_word_list <- c(result_word_list,word_vector) ##Wrong!! need to be fixed!!!
}
return(result_word_list)
}
result_word_list <- apply(word_df,1,POS_ANALYSIS)
library(KoNLP)
result_word_list <- apply(word_df,1,POS_ANALYSIS)
word_df <- data.frame('diagnosis' = parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING),stringsAsFactors = F)
result_word_list <- apply(word_df,1,POS_ANALYSIS)
#result_word_list<-strsplit(word_df," ")
result_word_list <-c()
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param word_df
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' POS_ANALYSIS()
POS_ANALYSIS <- function(word_df){
word_list <- KoNLP::SimplePos22(word_df)
#result_word_list<-strsplit(word_df," ")
result_word_list <-c()
if(length(word_list) ==1){
word_vector <- word_list[[1]]
result_word_list <- c(word_vector)
}
else{
word_vector <- word_list[[1]]
for (k in 2:length(word_list)){
word_vector <- paste(word_vector,'+',word_list[[k]],sep = '')
}
result_word_list <- c(result_word_list,word_vector) ##Wrong!! need to be fixed!!!
}
return(result_word_list)
}
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param word_df
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' POS_ANALYSIS()
POS_ANALYSIS <- function(word_df){
word_list <- KoNLP::SimplePos22(word_df)
#result_word_list<-strsplit(word_df," ")
result_word_list <-c()
if(length(word_list) ==1){
word_vector <- word_list[[1]]
result_word_list <- c(word_vector)
}
else{
word_vector <- word_list[[1]]
for (k in 2:length(word_list)){
word_vector <- paste(word_vector,'+',word_list[[k]],sep = '')
}
result_word_list <- c(result_word_list,word_vector) ##Wrong!! need to be fixed!!!
}
return(result_word_list)
}
result_word_list <- apply(word_df,1,POS_ANALYSIS)
head(result_word_list)
result_word_list<- unlist(result_word_list)
result_word_list
doc.list <- parallel::parLapply(myCluster,result_word_list,K_POS_EXTRACTION)
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param wordlist
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' K_POS_EXTRACTION()
K_POS_EXTRACTION <- function(wordlist){
wordlist <- gsub('/F+','/CW+',wordlist)
wordlist <- gsub('/NC+','/CW+',wordlist)
pos_start <- as.vector(gregexpr('[^+]+\\/CW[+]',wordlist)[[1]])
pos_length <- as.vector(attr(gregexpr('[^+]+\\/CW[+]',wordlist)[[1]],'match.length'))
pos_end <- pos_start+pos_length-5
word_data = rep(NA,length(pos_start))
word <- c()
for(i in 1:length(pos_start)){
word_data[i] <- substr(wordlist,pos_start[i],pos_end[i])
word <- paste(word,word_data[i])
}
word <- substr(word,2,nchar(word))
return(word)
}
doc.list <- parallel::parLapply(myCluster,result_word_list,K_POS_EXTRACTION)
doc.list
doc.df <- data.frame('word' = unlist(doc.list),'row_id' = search_df$row_id ,stringsAsFactors = FALSE)
View(doc.df)
numCores <- parallel::detectCores() - 1
myCluster <- parallel::makeCluster(numCores)
search_df <- result_xml_df[result_xml_df$`<MN>`=='현병력',]
tag ='<TD>'
search_df[,tag][is.na(search_df[,tag])] <- ""
for (i in nrow(search_df):1){
if(search_df[i,tag] == ""){
search_df <- search_df[-i,]
}
}
xml_df <- search_df[tag]
word_df <- data.frame('diagnosis' = parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING),stringsAsFactors = F)
View(word_df)
doc.df <- data.frame(c(word_df),'row_id' = search_df$row_id,stringsAsFactors = F)
View(doc.df)
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param result_xml_df
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' LanguagePreProcessingFunction()
LanguagePreProcessingFunction <- function(result_xml_df){
numCores <- parallel::detectCores() - 1
myCluster <- parallel::makeCluster(numCores)
search_df <- result_xml_df[result_xml_df$`<MN>`=='현병력',]
tag ='<TD>'
search_df[,tag][is.na(search_df[,tag])] <- ""
for (i in nrow(search_df):1){
if(search_df[i,tag] == ""){
search_df <- search_df[-i,]
}
}
xml_df <- search_df[tag]
word_df <- data.frame('diagnosis' = parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING),stringsAsFactors = F)
doc.df <- data.frame(c(word_df),'row_id' = search_df$row_id,stringsAsFactors = F)
#result_word_list <- apply(word_df,1,POS_ANALYSIS)
#result_word_list<- unlist(result_word_list)
#doc.list <- parallel::parLapply(myCluster,result_word_list,K_POS_EXTRACTION)
#doc.df <- data.frame('word' = unlist(doc.list),'row_id' = search_df$row_id ,stringsAsFactors = FALSE)
parallel::stopCluster(myCluster)
return(doc.df)
}
library(CustomCovariateSetting)
options("fftempdir"="D:/temp")
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
noteConceptId = 44814637
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- CustomCovariateSetting::createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE,
numberOfTopics = 100)
#undebug(CustomCovariateSetting::getTopicFromNoteSettings)
covariates <- CustomCovariateSetting::getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings,
sampleSize=1000)
options("fftempdir"="D:/temp")
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
noteConceptId = 44814637
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- CustomCovariateSetting::createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE,
numberOfTopics = 100)
#undebug(CustomCovariateSetting::getTopicFromNoteSettings)
covariates <- CustomCovariateSetting::getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings,
sampleSize=1000)
covariates
covariateSettings <- FeatureExtraction::createCovariateSettings(useDemographicsGender = TRUE,
useDemographicsAgeGroup = TRUE,
useDemographicsRace = TRUE,
useDemographicsEthnicity = TRUE,
useDemographicsIndexYear = TRUE,
useDemographicsIndexMonth = TRUE)
noteCovSet <-  createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE,
numberOfTopics = 10)
covariates <-  FeatureExtraction::getDbCovariateData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortDatabaseSchema = resultsDatabaseSchema,
cohortTable = "cohort",
cohortId = 747,
covariateSettings = covariateSettings)
covariates <-  FeatureExtraction::getDbCovariateData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortDatabaseSchema = resultsDatabaseSchema,
cohortTable = "cohort",
cohortId = 747,
covariateSettings = noteCovSet)
covariateSettingsList <- list(covariateSettings, noteCovSet)
covariates <-  FeatureExtraction::getDbCovariateData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortDatabaseSchema = resultsDatabaseSchema,
cohortTable = "cohort",
cohortId = 747,
covariateSettings = covariateSettingsList)
covariates <-  FeatureExtraction::getDbCovariateData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortDatabaseSchema = resultsDatabaseSchema,
cohortTable = "cohort",
cohortId = 747,
covariateSettings = covariateSettingsList)
cdmDatabaseSchema
resultsDatabaseSchema
covariates <-  FeatureExtraction::getDbCovariateData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortDatabaseSchema = resultsDatabaseSchema,
cohortTable = "cohort",
cohortId = 747,
covariateSettings = covariateSettingsList)
traceback()
noteCovSet <-  createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec = TRUE)
covariateSettingsList <- list(covariateSettings, noteCovSet)
covariates <-  FeatureExtraction::getDbCovariateData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortDatabaseSchema = resultsDatabaseSchema,
cohortTable = "cohort",
cohortId = 747,
covariateSettings = covariateSettingsList)
remove.packages("CustomCovariateSetting", lib="~/R/win-library/3.5")
