#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' POS_ANALYSIS()
POS_ANALYSIS <- function(word_df){
word_list <- KoNLP::SimplePos22(word_df)
if(length(word_list) ==1){
word_vector <- word_list[[1]]
result_word_list <- c(word_vector)
}
else{
word_vector <- word_list[[1]]
for (k in 2:length(word_list)){
word_vector <- paste(word_vector,'+',word_list[[k]],sep = '')
}
result_word_list <- c(word_vector)
}
return(result_word_list)
}
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param doc.df
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' DIC_COMPARE()
DIC_COMPARE <- function(doc.df){
dictionary <- diction()
colnames(dictionary) <- c('word')
kor_tmp_word <- c()
kor_word <- c()
for(i in 1:nrow(doc.df)){
only_kor <-strsplit(doc.df$'word'[i],' ')[[1]]
only_kor <-unique(only_kor)
kor_tmp_word <- c(kor_tmp_word,only_kor)
if(i%%100 == 0){
kor_word <- c(kor_word,kor_tmp_word)
kor_tmp_word <- c()
}
}
kor_word <- c(kor_word,kor_tmp_word)
kor_word_unique <- unique(kor_word)
df <- data.frame(word = c(kor_word_unique),stringsAsFactors = FALSE)
merge_df <- merge(df,dictionary,by.x = 'word')
n_gram_1 <-  as.vector(merge_df[,1])
n_gram_union <- n_gram_1
kor_tmp_word <- c()
kor_word <- c()
for(i in 1:nrow(doc.df)){
only_kor <-strsplit(doc.df$word[i],' ')[[1]]
only_kor <-unique(only_kor)
kor_tmp_word <- c(kor_tmp_word,only_kor)
if(i%%100 == 0){
kor_word <- c(kor_word,kor_tmp_word)
kor_tmp_word <- c()
}
}
kor_word <- c(kor_word,kor_tmp_word)
kor_word_unique <- unique(kor_word)
word_storage <- c()
word_tmp_storage <- c()
for(i in 1:length(n_gram_union)){
word_tmp_storage <- c(word_tmp_storage,kor_word_unique[grep(n_gram_union[i],kor_word_unique)])
if(i %% 10 == 0){
word_storage <- c(word_storage,word_tmp_storage)
word_tmp_storage <- c()
}
}
word_storage <- c(word_storage,word_tmp_storage)
diag_word_tmp_df <- data.frame(stringsAsFactors = F)
diag_word_df <- data.frame(stringsAsFactors = F)
for(i in 1:nrow(doc.df)){
word <- strsplit(doc.df$'word'[i],' ')[[1]]
#영어는 따로 분리
eng_word <- gsub('[^a-zA-Z]','',word)
eng_word[length(eng_word)+1] <- c("")
only_eng <- eng_word[-which(eng_word == "")]
only_eng <- unique(only_eng)
diag_word <- c(intersect(word,word_storage),only_eng)
diag_word_tmp_tmp_df <- data.frame('row_id' = rep(doc.df$row_id[i],length(diag_word)),'word' = diag_word,stringsAsFactors = F)
#rbind 나눠서 진행
diag_word_tmp_df <- rbind(diag_word_tmp_df,diag_word_tmp_tmp_df)
if(i %% 100 == 0){
diag_word_df <- rbind(diag_word_df,diag_word_tmp_df)
diag_word_tmp_df <- data.frame(stringsAsFactors = F)
}
}
diag_word_df <- rbind(diag_word_df,diag_word_tmp_df)
return(diag_word_df)
}
dictionary <- diction()
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' diction()
diction <- function(){
dic <- read.csv('D:/Dongsu/NLP_Sample/R_CODE/DIC/medi_dic.csv',stringsAsFactors = F)
return(dic)
}
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_ID
covariates <- WORD_LOAD(row_id,covariates_value)
library(KoNLP)
covariates <- WORD_LOAD(row_id,covariates_value)
# Convert colum names to camelCase:
colnames(covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates))
####unique numeric Id for each covariates###################
covariates.df<-data.frame(covariates)
covariates.factor<-as.factor(covariates.df$covariateId)
word <- levels(covariates.factor)
num <- seq(levels(covariates.factor))
mapping_df <- data.frame('word' = word, 'num' = num,stringsAsFactors = F)
covariates <- covariates
covariates
covariates.df$rowId<-as.numeric(as.factor(covariates.df$rowId))
covariates.df$covariateId<-as.numeric(as.factor(covariates.df$covariateId))
covariates.df
mapping_df
as.factor(covariates.df$covariateId)
as.numeric(as.factor(covariates.df$covariateId))
mapping_df
covariates.factor
covariateId.factor<-as.factor(covariates.df$covariateId)
covariateRowId.factor<-as.factor(covariates.df$rowId)
word <- levels(covariateId.factor)
num <- seq(levels(covariateId.factor))
mapping_df <- data.frame('word' = word, 'num' = num,stringsAsFactors = F)
rowId <- levels(covariateRowId.factor)
num <- seq(levels(covariateId.factor))
covariateId <- mapping_df <- data.frame('word' = word, 'num' = num,stringsAsFactors = F)
covariateId_mapping_df <- data.frame('word' = word, 'num' = num,stringsAsFactors = F)
rowId_mapping_df <- data.frame('rowId' = rowId, 'num' = num,stringsAsFactors = F)
rowId <- levels(covariateRowId.factor)
num <- seq(levels(covariateRowId.factor))
rowId_mapping_df <- data.frame('rowId' = rowId, 'num' = num,stringsAsFactors = F)
rowId_mapping_df
covariateRowId.factor<-as.factor(covariates.df$rowId)
covariateRowId.factor
covariates.df$rowId
covariates.df
covariates
####unique numeric Id for each covariates###################
covariates.df<-data.frame(covariates)
covariates.df
covariateId.factor<-as.factor(covariates.df$covariateId)
covariateId.factor
word <- levels(covariateId.factor)
num <- seq(levels(covariateId.factor))
covariateId_mapping_df <- data.frame('word' = word, 'num' = num,stringsAsFactors = F)
covariateId_mapping_df
covariateRowId.factor<-as.factor(covariates.df$rowId)
covariateRowId.factor
rowId <- levels(covariateRowId.factor)
num <- seq(levels(covariateRowId.factor))
rowId_mapping_df <- data.frame('rowId' = rowId, 'num' = num,stringsAsFactors = F)
rowId_mapping_df
covariates.df$rowId<-as.numeric(as.factor(covariates.df$rowId))
covariates.df$covariateId<-as.numeric(as.factor(covariates.df$covariateId))
covariates.df
data <- Matrix::sparseMatrix(i=covariates.df$rowId,
j=covariates.df$covariateId,
x=covariates.df$covariateValue,
dims=c(max(covariates.df$rowId), max(covariates.df$covariateId))) # edit this to max(map$newIds)
##Text2Vec
colnames(data) <- unique(covariates.df$covariateId)
colnames(data)
##Topic Modeling
lda_model = LDA$new(n_topics = covariateSettings$numberOfTopics, doc_topic_prior = 0.1, topic_word_prior = 0.01)
library(tm)
##Topic Modeling
lda_model = LDA$new(n_topics = covariateSettings$numberOfTopics, doc_topic_prior = 0.1, topic_word_prior = 0.01)
library(caret)
data <- Matrix::sparseMatrix(i=covariates.df$rowId,
j=covariates.df$covariateId,
x=covariates.df$covariateValue,
dims=c(max(covariates.df$rowId), max(covariates.df$covariateId))) # edit this to max(map$newIds)
data
colnames(data) <- unique(covariates.df$covariateId)
data
##Topic Modeling
lda_model = LDA$new(n_topics = covariateSettings$numberOfTopics, doc_topic_prior = 0.1, topic_word_prior = 0.01)
library(dplyr)
library(text2vec)
library(e1071)
##Topic Modeling
lda_model = LDA$new(n_topics = covariateSettings$numberOfTopics, doc_topic_prior = 0.1, topic_word_prior = 0.01)
##Topic Modeling
lda_model = LDA$new(n_topics = 10, doc_topic_prior = 0.1, topic_word_prior = 0.01)
lda_model
doc_topic_distr =
lda_model$fit_transform(x = data, n_iter = 1000,
convergence_tol = 0.001, n_check_convergence = 25,
progressbar = FALSE)
data.frame(doc_topic_distr)
data
covariates.df$rowId
data
unique(covariates.df$covariateId)
covariates.df$covariateId
unique(covariates.df$covariateId)
lda_model$get_top_words()
lda_model$get_top_words(topic_number = T)
lda_model$get_top_words(topic_number = T)
doc_topic_distr =   lda_model$fit_transform(x = data, n_iter = 1000,
convergence_tol = 0.001, n_check_convergence = 25,
progressbar = T)
doc_topic_distr =   lda_model$fit_transform(x = data, n_iter = 1000,
convergence_tol = 0.001, n_check_convergence = 25,
progressbar = FALSE)
doc_topic_distr
colnames(doc_topic_distr)
covariates.df
# Construct covariate reference:
covariateRef  <- data.frame(covariateId = 1,
covariateName = "Length of observation",
analysisId = 1,
conceptId = 0)
covariateRef
covariateRef
covariateRef <- ff::as.ffdf(covariateRef)
covariateRef
# Construct covariate reference:
covariateRef  <- data.frame(covariateId = 1,
covariateName = "Length of observation",
analysisId = 1,
conceptId = 0)
covariateRef
lda_model$clone()
covariates
FeatureExtraction::createCovariateSettings(useDemographicsGender = F)
covariateSettings <- list(temporal = FALSE)
covariateSettings
formalNames <- names(formals(createCovariateSettings))
createCovariateSettings
useDictionary == FALSE
#선행조건
library(KoNLP)
#기본으로 들어가야함
#R Profile.R파일에서 Ram 높여주고, fileEncoding = 'UTF-8'이 지정 되어야함.
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = FALSE,
useTopicModeling = TRUE)
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = FALSE,
useTopicModeling = FALSE)
?stop
stop(domain = 'Not implemented.')
stop(call. = 'implemented.', domain = 'Not implemented.')
stop(... = 'zz'call. = 'implemented.', domain = 'Not implemented.')
stop(... = 'zz',call. = 'implemented.', domain = 'Not implemented.')
stop('Not implemented.')
#선행조건
library(KoNLP)
#기본으로 들어가야함
#R Profile.R파일에서 Ram 높여주고, fileEncoding = 'UTF-8'이 지정 되어야함.
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = FALSE,
useTopicModeling = FALSE)
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = FALSE)
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE)
covariateSettings
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec =  = TRUE)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec = TRUE)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
covariates$covariates
covariates$covariateRef
covariates$covariateRef$conceptId
FeatureExtraction::createCovariateSettings(useConditionGroupEraAnyTimePrior = T)
covariateSettings <- FeatureExtraction::createCovariateSettings(useConditionGroupEraAnyTimePrior = T)
FeatureExtraction::getDbCovariateData(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
covariateSettings <- FeatureExtraction::createCovariateSettings(useConditionGroupEraAnyTimePrior = T)
covariates <- FeatureExtraction::getDbCovariateData(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
covariates <- FeatureExtraction::getDbCovariateData(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
# Some SQL to construct the covariate:
sql <- paste("SELECT @row_id_field AS row_id,",
#"1 as covariate_id,",
"cosmic_id as covariate_id,",
"1 as covariate_value
FROM @cohortTable AS cohort
INNER JOIN (SELECT occ.person_id, REPLACE(ann.value_as_string, 'COSM','') as cosmic_id, CAST(seq.COLLECTING_DATE AS DATE) AS collecting_date
FROM @cdm_database_schema.VARIANT_OCCURRENCE occ
JOIN @cdm_database_schema.variant_annotation ann
ON occ.variant_occurrence_id = ann.variant_occurrence_id
JOIN @cdm_database_schema.sequencing seq
ON occ.sequencing_id = seq.sequencing_id
WHERE ann.annotation_source_value = 'cosmic_id') x
ON cohort.subject_id = x.person_id
AND COHORT.cohort_start_date >= X.collecting_date",
"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}")
sql <- SqlRender::renderSql(sql,
cohortTable = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
sql
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="SKT_CDM.dbo",
user="chandryou",
password="dbtmdcks12#")
cdmDatabaseSchema <- "SKT_CDM_x3.dbo"
resultsDatabaseSchema <- "SKT_CDM_x3.dbo"
cdmVersion <- "5"
workFolder <- "C:/Users/chan/Downloads"
setwd("C:/Users/chan/Downloads")
cohortTable<-"cohort"
cohortId<-1
options("fftempdir"="C:/Users/chan/Downloads")
# Some SQL to construct the covariate:
sql <- paste("SELECT @row_id_field AS row_id,",
#"1 as covariate_id,",
"cosmic_id as covariate_id,",
"1 as covariate_value
FROM @cohortTable AS cohort
INNER JOIN (SELECT occ.person_id, REPLACE(ann.value_as_string, 'COSM','') as cosmic_id, CAST(seq.COLLECTING_DATE AS DATE) AS collecting_date
FROM @cdm_database_schema.VARIANT_OCCURRENCE occ
JOIN @cdm_database_schema.variant_annotation ann
ON occ.variant_occurrence_id = ann.variant_occurrence_id
JOIN @cdm_database_schema.sequencing seq
ON occ.sequencing_id = seq.sequencing_id
WHERE ann.annotation_source_value = 'cosmic_id') x
ON cohort.subject_id = x.person_id
AND COHORT.cohort_start_date >= X.collecting_date",
"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}")
sql <- SqlRender::renderSql(sql,
cohortTable = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
sql
covariateRef
# Construct analysis reference:
analysisRef <- data.frame(analysisId = 1,
analysisName = "Length of observation",
domainId = "Demographics",
startDay = 0,
endDay = 0,
isBinary = "N",
missingMeansZero = "Y")
analysisRef
# Construct analysis reference:
metaData <- list(sql = sql, call = match.call())
metaData
# Construct covariate reference:
covariateRef  <- data.frame(covariateId = 1,
covariateName = "Length of observation",
analysisId = 1,
conceptId = 0)
covariateRef
?getDbDefaultCovariateData
#선행조건
library(KoNLP)
#기본으로 들어가야함
#R Profile.R파일에서 Ram 높여주고, fileEncoding = 'UTF-8'이 지정 되어야함.
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec = TRUE)
Sys.time()
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
Sys.time()
covariateSettings <- FeatureExtraction::createCovariateSettings(useConditionGroupEraAnyTimePrior = T)
covariates <- FeatureExtraction::getDbCovariateData(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec = TRUE)
Sys.time()
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
#선행조건
library(KoNLP)
#기본으로 들어가야함
#R Profile.R파일에서 Ram 높여주고, fileEncoding = 'UTF-8'이 지정 되어야함.
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec = TRUE)
Sys.time()
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
Sys.time()
