useMeasurementLongTerm = FALSE,
useObservationLongTerm = FALSE,
useDistinctConditionCountLongTerm =FALSE,
useVisitCountLongTerm = FALSE,
longTermStartDays = 0,
endDays = 30)
covariateSettings
covariateRef
# Construct covariate reference:
covariateRef  <- data.frame(covariateId = 1,
covariateName = "Length of observation",
analysisId = 1,
conceptId = 0)
covariateRef
covariates <- WORD_LOAD(row_id,covariates_value)
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_ID
covariates <- WORD_LOAD(row_id,covariates_value)
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
#cohort_id가 지정되지 않았을 때
#"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}"
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
class(covariates)
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_ID
covariates <- WORD_LOAD(row_id,covariates_value)
#선행조건
library(KoNLP)
#기본으로 들어가야함
#R Profile.R파일에서 Ram 높여주고, fileEncoding = 'UTF-8'이 지정 되어야함.
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE)
Sys.time()
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
traceback()
# Some SQL to construct the covariate:
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
class(covariates)
head(covariates$COVARIATE_ID)
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_ID
covariates <- WORD_LOAD(row_id,covariates_value)
covariates
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE)
#선행조건
library(KoNLP)
#기본으로 들어가야함
#R Profile.R파일에서 Ram 높여주고, fileEncoding = 'UTF-8'이 지정 되어야함.
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE)
Sys.time()
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
#선행조건
library(KoNLP)
#기본으로 들어가야함
#R Profile.R파일에서 Ram 높여주고, fileEncoding = 'UTF-8'이 지정 되어야함.
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
covariateSettings = covariateSettings
)
covariates
# Convert colum names to camelCase:
colnames(covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates))
covariates$covariates$row_id
# Convert colum names to camelCase:
colnames(covariates$covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates$covariates))
# Convert colum names to camelCase:
colnames(covariates$covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates$covariates))
####unique numeric Id for each covariates###################
covariates.df<-data.frame(covariates$covariates)
covariates.df
covariates.factor<-as.factor(covariates.df$covariateId)
covariates.factor
covariates$covariates
# Convert colum names to camelCase:
colnames(covariates$covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates$covariates))
head(covariates$covariates)
covariates <- WORD_LOAD(row_id,covariates_value)
# Convert colum names to camelCase:
colnames(covariates$covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates$covariates))
covariates$covariates
head(covariates$covariates)
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
#cohort_id가 지정되지 않았을 때
#"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}"
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_ID
covariates <- WORD_LOAD(row_id,covariates_value)
covariates
# Convert colum names to camelCase:
colnames(covariates$covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates$covariates))
# Convert colum names to camelCase:
colnames(covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates))
head(covariates$covariates)
covariates
head(covariates)
covariates
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
#cohort_id가 지정되지 않았을 때
#"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}"
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_ID
covariates <- WORD_LOAD(row_id,covariates_value)
if(covariateSettings$useTextToVec == TRUE){
}
if(covariateSettings$useTopicModeling == TRUE){
}
if(covariateSettings$useGloVe == TRUE){
}
if(covariateSettings$useAutoencoder == TRUE){
}
# Convert colum names to camelCase:
colnames(covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates))
head(covariates)
covariates
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
#cohort_id가 지정되지 않았을 때
#"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}"
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
#cohort_id가 지정되지 않았을 때
#"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}"
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
traceback()
covariates
# Convert colum names to camelCase:
colnames(covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates))
head(covariates)
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
#cohort_id가 지정되지 않았을 때
#"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}"
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_ID
covariates <- WORD_LOAD(row_id,covariates_value)
covariates
DatabaseConnector::querySql.ffdf(connection, sql)
connection
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_ID
covariates <- WORD_LOAD(row_id,covariates_value)
covariates
head(covariates)
# Convert colum names to camelCase:
colnames(covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates))
head(covariates)
covariates$covariates
covariates
ff::as.ffdf(covariates)
?as.ffdf
covariates <- as.data.frame(covariates)
covariates
covariates[1,]
covariates[1,1]
ff::as.ffdf(covariates)
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
covariates$ROW_ID
covariates$COVARIATE_ID
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
#cohort_id가 지정되지 않았을 때
#"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}"
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
covariates$ROW_ID
#선행조건
library(KoNLP)
#기본으로 들어가야함
#R Profile.R파일에서 Ram 높여주고, fileEncoding = 'UTF-8'이 지정 되어야함.
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
#cohort_id가 지정되지 않았을 때
#"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}"
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
# Some SQL to construct the covariate:
sql <- paste(
'SELECT top 1000 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
covariates$ROW_ID
# Some SQL to construct the covariate:
sql <- paste(
'SELECT top 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_id,',
'1 AS covariate_value',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
#cohord_id가 지정되었을 때
'AND cohort_definition_id = @cohort_id'
)
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
####unique numeric Id for each covariates###################
covariates.df<-data.frame(covariates)
covariates.df
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_ID
covariates <- WORD_LOAD(row_id,covariates_value)
# Convert colum names to camelCase:
colnames(covariates) <- SqlRender::snakeCaseToCamelCase(colnames(covariates))
covariates
####unique numeric Id for each covariates###################
covariates.df<-data.frame(covariates)
covariates.factor<-as.factor(covariates.df$covariateId)
covariates.factor
word <- levels(covariates.factor)
num <- seq(levels(covariates.factor))
word
num
mapping_df <- data.frame('word' = word, 'num' = num,stringsAsFactors = F)
mapping_df
covariates.df$rowId
covariates.df$covariateId
covariates.df$rowId<-as.numeric(as.factor(covariates.df$rowId))
covariates.df$covariateId<-as.numeric(as.factor(covariates.df$covariateId))
head(covariates.df)
covariates.df
