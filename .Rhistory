devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE)
getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
hello()
hello()
remove.packages("CustomCovariateSetting", lib="~/R/win-library/3.4")
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
hello()
hello()
hello()
remove.packages("CustomCovariateSetting", lib="~/R/win-library/3.4")
l
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
hello()
hello()
remove.packages("CustomCovariateSetting", lib="~/R/win-library/3.4")
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
hello()
remove.packages("CustomCovariateSetting", lib="~/R/win-library/3.4")
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
hello()
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE)
getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
useSejongDic()
library(KoNLP)
useSejongDic()
remove.packages("CustomCovariateSetting", lib="~/R/win-library/3.4")
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE)
getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
#???? ?غ?????########################################
#XML_Parsing_Pro7???? file=""?? RDS ???? ???θ? ???ְ? ?????? ?? ???? ?? ??.
#C:\Program Files\R\R-3.5.1\library\base\R\RProfile?? options(java.parameters = c("-Xmx16384m","-Dfile.encoding=UTF-8")) ?߰? # KoNLP???? ????
#options(java.parameters = c("-Xmx16384m","-Dfile.encoding=UTF-8"))
options("java.parameters")$java.parameters
remove.packages("CustomCovariateSetting", lib="~/R/win-library/3.4")
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE)
getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
devtools::install_github("parkdongsu/CustomCovariateSetting")
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE)
getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
traceback()
word_list
sql <- paste(
'SELECT TOP 1000 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_value,',
'1 AS covariate_id',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}")
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
sql <- paste(
'SELECT TOP 100 @row_id_field AS row_id,',
'n.NOTE_TEXT AS covariate_value,',
'1 AS covariate_id',
'FROM @cdm_database_schema.NOTE n',
'JOIN @cohort_table c',
'ON n.person_id = c.subject_id',
'AND n.NOTE_DATE = c.COHORT_START_DATE',
'WHERE NOTE_TYPE_CONCEPT_ID = 44814637',
"{@cohort_id != -1} ? {AND cohort_definition_id = @cohort_id}")
sql <- SqlRender::renderSql(sql,
cohort_table = cohortTable,
cohort_id = cohortId,
row_id_field = rowIdField,
cdm_database_schema = cdmDatabaseSchema)$sql
sql <- SqlRender::translateSql(sql, targetDialect = attr(connection, "dbms"))$sql
# Retrieve the covariate:
covariates <- DatabaseConnector::querySql.ffdf(connection, sql)
row_id              <-  covariates$ROW_ID
covariates_value    <- covariates$COVARIATE_VALUE
rowid <-row_id
covariatesvalue<-covariates_value
result_xml_df <- XML_PASING_FUNCTION(rowid,covariatesvalue)
result_xml_df[1]
result_xml_df[1,]
doc.df <- NLP_PROCESSING_FUNCTION(result_xml_df)
numCores <- parallel::detectCores() - 1
myCluster <- parallel::makeCluster(numCores)
search_df <- result_xml_df[result_xml_df$`<MN>`=='현병력',]
search_df
tag ='<TD>'
search_df[,tag][is.na(search_df[,tag])] <- ""
for (i in nrow(search_df):1){
if(search_df[i,tag] == ""){
search_df <- search_df[-i,]
}
}
xml_df <- search_df[tag]
xml_df
word_df <- as.data.frame(parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING))
word_df
result_word_list <- apply(word_df,1,POS_ANALYSIS)
#' Custom createCoveriate Settings
#'
#' This function is Custom createCoveriate Settings.
#' @param word_df
#' @keywordsa createCovariateSetting
#' @export
#' @examples
#' POS_ANALYSIS()
POS_ANALYSIS <- function(word_df){
word_list <- KoNLP::SimplePos22(word_df)
if(length(word_list) ==1){
word_vector <- word_list[[1]]
result_word_list <- c(word_vector)
}
else{
word_vector <- word_list[[1]]
for (k in 2:length(word_list)){
word_vector <- paste(word_vector,'+',word_list[[k]],sep = '')
}
result_word_list <- c(word_vector)
}
return(result_word_list)
}
result_word_list <- apply(word_df,1,POS_ANALYSIS)
View(word_df)
word_list <- KoNLP::SimplePos22(word_df)
word_df
word_df <- as.data.frame(parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING))
View(word_df)
word_list <- KoNLP::SimplePos22(word_df[1])
word_df[1]
word_df[1,]
word_list <- KoNLP::SimplePos22(word_df[1,])
word_list
rm(word_list)
word_list <- KoNLP::SimplePos22(word_df[1,])
word_list
word_df <- as.data.frame(parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING),stringsAsFactors = F)
result_word_list <- apply(word_df,1,POS_ANALYSIS)
word_list <- KoNLP::SimplePos22(word_df[1,])
word_list
KoNLP::SimplePos22(word_df[1,])
word_df <- as.data.frame(parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING),stringsAsFactors = F)
word_df[1,]
word_list <- KoNLP::SimplePos22(word_df[1,])
word_list
getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
word_df <- as.data.frame(parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING),stringsAsFactors = F)
View(word_df)
word_df[1,]
word_df <- as.data.frame(parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING))
word_df[1,]
word_df <- as.data.frame(parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING),stringsAsFactors = F)
result_word_list <- apply(word_df,1,POS_ANALYSIS)
word_df[1,]
word_list <- KoNLP::SimplePos22(word_df[1,])
word_list
KoNLP::SimplePos22(word_df[1,])
#NLP_PROCESSING ?Լ??? ???? ?ʱ? ??��(????ó??)
word_df <- as.data.frame(parApply(myCluster,xml_df,1,NLP_PROCESSING))
#NLP_PROCESSING ?Լ??? ???? ?ʱ? ??��(????ó??)
word_df <- as.data.frame(parallel::parApply(myCluster,xml_df,1,NLP_PROCESSING))
#???¼? ?м??? ??ġ??
result_word_list <- apply(word_df,1,POS_ANALYSIS)
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_171")
library(rJava)
library(devtools);
#install.packages("drat")
#drat::addRepo("OHDSI")
#install_github("ohdsi/FeatureExtraction", args = "--no-multiarch")
#install_github("ohdsi/PatientLevelPrediction", args = "--no-multiarch")
library(DatabaseConnector)
library(SqlRender)
library(FeatureExtraction)
library(PatientLevelPrediction)
workingFolder<-"D:/Dongsu/R_code/sql"
setwd(workingFolder)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="atlas",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
cdmDatabaseSchema<-"Dolphin_CDM.dbo"
targetDatabaseSchema<-"Dolphin_CDM.dbo"
targetCohortTable<-"cohort"
targetCohortId <- 747
outcomeCohortId <- 748
cdmversion <- "5"
#CREATE TABLE & INPUT VALUE
#DB ???? 7???̻? ?Կ??? ȯ?ڵ??? ��???? ?̾? INSERT
#===========================================
# (T)
#===========================================
sql <- SqlRender::readSql(file.path(workingFolder,"all_admission.sql")) #local
sql <- SqlRender::renderSql(sql,
cdm_database_schema=cdmDatabaseSchema,
target_database_schema=targetDatabaseSchema,
target_cohort_table=targetCohortTable,
target_cohort_id=targetCohortId
)$sql
sql <- SqlRender::translateSql(sql,
targetDialect=connectionDetails$dbms)$sql
DatabaseConnector::executeSql(connection,sql)
#???? ?��޽??Կ? ȯ?ڵ?
#===========================================
# (O)
#===========================================
sql <- SqlRender::readSql("ed_visit.sql") #local
sql <- SqlRender::renderSql(sql,
cdm_database_schema=cdmDatabaseSchema,
target_database_schema=targetDatabaseSchema,
target_cohort_table=targetCohortTable,
target_cohort_id=outcomeCohortId
)$sql
sql <- SqlRender::translateSql(sql,
targetDialect=connectionDetails$dbms)$sql
DatabaseConnector::executeSql(connection,sql)
#30?? ?̳??? ???Կ??? ȯ?ڸ? DF?? ?̾Ƴ??? ?Լ?.
covariateSettings <- FeatureExtraction::createCovariateSettings(useDemographicsGender = FALSE,
useDemographicsAge = FALSE, useDemographicsAgeGroup = FALSE,
useDemographicsRace = FALSE, useDemographicsEthnicity = FALSE,
useConditionOccurrenceLongTerm = FALSE,
useDrugExposureLongTerm = FALSE,
useProcedureOccurrenceLongTerm = FALSE,
useMeasurementLongTerm = FALSE,
useObservationLongTerm = FALSE,
useDistinctConditionCountLongTerm =FALSE,
useVisitCountLongTerm = FALSE,
longTermStartDays = 0,
endDays = 30)
plpData <- PatientLevelPrediction::getPlpData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
#oracleTempSchema = oracleTempSchema,
cohortDatabaseSchema = targetDatabaseSchema,
cohortTable = "cohort",
cohortId = targetCohortId,
washoutPeriod = 0,
covariateSettings = covariateSettings,
outcomeDatabaseSchema = targetDatabaseSchema,
outcomeTable = "cohort",
outcomeIds = outcomeCohortId,
cdmVersion = cdmversion
)
population <- PatientLevelPrediction::createStudyPopulation(plpData, population = NULL,
outcomeId=outcomeCohortId,
binary = T,
includeAllOutcomes = T,
firstExposureOnly = FALSE,
washoutPeriod = 0,
removeSubjectsWithPriorOutcome = FALSE,
priorOutcomeLookback = 99999,
requireTimeAtRisk = T,
minTimeAtRisk = 1,
riskWindowStart = 1,
addExposureDaysToStart = FALSE,
riskWindowEnd = 30,
addExposureDaysToEnd = F)
#################################################################################################################
#?ʿ??? ��???? ???? dataframe��?? ???? -> 30?? ?̳??? ?Կ? ��???? ?ľ??? ?????? ??????.
outcomeCount_df <- data.frame(c(population["subjectId"],population["cohortStartDate"],population["outcomeCount"]))
#��???ϱ? ��?? NOTE_TABLE?? ?Ӽ? ?̸?�� ???? ??????
colnames(outcomeCount_df) <-c("PERSON_ID","NOTE_DATE","outcomeCount")
#################################################################################################################
#DatabaseConnector::dbDisconnect(conn = connection)
#30?? ?̳??? ???Կ??? ȯ?ڸ? DF?? ?̾Ƴ??? ?Լ?.
covariateSettings <- FeatureExtraction::createCovariateSettings(useDemographicsGender = FALSE,
useDemographicsAge = FALSE, useDemographicsAgeGroup = FALSE,
useDemographicsRace = FALSE, useDemographicsEthnicity = FALSE,
useConditionOccurrenceLongTerm = FALSE,
useDrugExposureLongTerm = FALSE,
useProcedureOccurrenceLongTerm = FALSE,
useMeasurementLongTerm = FALSE,
useObservationLongTerm = FALSE,
useDistinctConditionCountLongTerm =FALSE,
useVisitCountLongTerm = FALSE,
longTermStartDays = 0,
endDays = 30)
plpData <- PatientLevelPrediction::getPlpData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
#oracleTempSchema = oracleTempSchema,
cohortDatabaseSchema = targetDatabaseSchema,
cohortTable = "cohort",
cohortId = targetCohortId,
washoutPeriod = 0,
covariateSettings = covariateSettings,
outcomeDatabaseSchema = targetDatabaseSchema,
outcomeTable = "cohort",
outcomeIds = outcomeCohortId,
cdmVersion = cdmversion
)
#???? ?غ?????########################################
#XML_Parsing_Pro7???? file=""?? RDS ???? ???θ? ???ְ? ?????? ?? ???? ?? ??.
#C:\Program Files\R\R-3.5.1\library\base\R\RProfile?? options(java.parameters = c("-Xmx16384m","-Dfile.encoding=UTF-8")) ?߰? # KoNLP???? ????
#options(java.parameters = c("-Xmx16384m","-Dfile.encoding=UTF-8"))
options("java.parameters")$java.parameters
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.8.0_171")
library(rJava)
library(devtools);
#install.packages("drat")
#drat::addRepo("OHDSI")
#install_github("ohdsi/FeatureExtraction", args = "--no-multiarch")
#install_github("ohdsi/PatientLevelPrediction", args = "--no-multiarch")
library(DatabaseConnector)
library(SqlRender)
library(FeatureExtraction)
library(PatientLevelPrediction)
workingFolder<-"D:/Dongsu/R_code/sql"
setwd(workingFolder)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="atlas",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
cdmDatabaseSchema<-"Dolphin_CDM.dbo"
targetDatabaseSchema<-"Dolphin_CDM.dbo"
targetCohortTable<-"cohort"
targetCohortId <- 747
outcomeCohortId <- 748
cdmversion <- "5"
#CREATE TABLE & INPUT VALUE
#DB ???? 7???̻? ?Կ??? ȯ?ڵ??? ��???? ?̾? INSERT
#===========================================
# (T)
#===========================================
sql <- SqlRender::readSql(file.path(workingFolder,"all_admission.sql")) #local
sql <- SqlRender::renderSql(sql,
cdm_database_schema=cdmDatabaseSchema,
target_database_schema=targetDatabaseSchema,
target_cohort_table=targetCohortTable,
target_cohort_id=targetCohortId
)$sql
sql <- SqlRender::translateSql(sql,
targetDialect=connectionDetails$dbms)$sql
DatabaseConnector::executeSql(connection,sql)
#???? ?��޽??Կ? ȯ?ڵ?
#===========================================
# (O)
#===========================================
sql <- SqlRender::readSql("ed_visit.sql") #local
sql <- SqlRender::renderSql(sql,
cdm_database_schema=cdmDatabaseSchema,
target_database_schema=targetDatabaseSchema,
target_cohort_table=targetCohortTable,
target_cohort_id=outcomeCohortId
)$sql
sql <- SqlRender::translateSql(sql,
targetDialect=connectionDetails$dbms)$sql
DatabaseConnector::executeSql(connection,sql)
#30?? ?̳??? ???Կ??? ȯ?ڸ? DF?? ?̾Ƴ??? ?Լ?.
covariateSettings <- FeatureExtraction::createCovariateSettings(useDemographicsGender = FALSE,
useDemographicsAge = FALSE, useDemographicsAgeGroup = FALSE,
useDemographicsRace = FALSE, useDemographicsEthnicity = FALSE,
useConditionOccurrenceLongTerm = FALSE,
useDrugExposureLongTerm = FALSE,
useProcedureOccurrenceLongTerm = FALSE,
useMeasurementLongTerm = FALSE,
useObservationLongTerm = FALSE,
useDistinctConditionCountLongTerm =FALSE,
useVisitCountLongTerm = FALSE,
longTermStartDays = 0,
endDays = 30)
plpData <- PatientLevelPrediction::getPlpData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
#oracleTempSchema = oracleTempSchema,
cohortDatabaseSchema = targetDatabaseSchema,
cohortTable = "cohort",
cohortId = targetCohortId,
washoutPeriod = 0,
covariateSettings = covariateSettings,
outcomeDatabaseSchema = targetDatabaseSchema,
outcomeTable = "cohort",
outcomeIds = outcomeCohortId,
cdmVersion = cdmversion
)
population <- PatientLevelPrediction::createStudyPopulation(plpData, population = NULL,
outcomeId=outcomeCohortId,
binary = T,
includeAllOutcomes = T,
firstExposureOnly = FALSE,
washoutPeriod = 0,
removeSubjectsWithPriorOutcome = FALSE,
priorOutcomeLookback = 99999,
requireTimeAtRisk = T,
minTimeAtRisk = 1,
riskWindowStart = 1,
addExposureDaysToStart = FALSE,
riskWindowEnd = 30,
addExposureDaysToEnd = F)
#################################################################################################################
#?ʿ??? ��???? ???? dataframe��?? ???? -> 30?? ?̳??? ?Կ? ��???? ?ľ??? ?????? ??????.
outcomeCount_df <- data.frame(c(population["subjectId"],population["cohortStartDate"],population["outcomeCount"]))
#��???ϱ? ��?? NOTE_TABLE?? ?Ӽ? ?̸?�� ???? ??????
colnames(outcomeCount_df) <-c("PERSON_ID","NOTE_DATE","outcomeCount")
#################################################################################################################
#DatabaseConnector::dbDisconnect(conn = connection)
getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE)
getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
covariateSettings = covariateSettings
)
KoNLP::SimplePos22('아버지가 가방에 들어가신다.')
#???? ?غ?????########################################
#XML_Parsing_Pro7???? file=""?? RDS ???? ???θ? ???ְ? ?????? ?? ???? ?? ??.
#C:\Program Files\R\R-3.5.1\library\base\R\RProfile?? options(java.parameters = c("-Xmx16384m","-Dfile.encoding=UTF-8")) ?߰? # KoNLP???? ????
#options(java.parameters = c("-Xmx16384m","-Dfile.encoding=UTF-8"))
options("java.parameters")$java.parameters
