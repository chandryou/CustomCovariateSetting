covariateName = levels(covariateId.factor),
analysisId = 1,
conceptId = 0)
doc_topic_distr_df
covariateRef  <- data.frame(covariateId = seq(levels(covariateId.factor)),
covariateName = levels(covariateId.factor),
analysisId = 1,
conceptId = 0)
covariateRef
topic_modeling_df <- data.frame(stringsAsFactors = F)
for(row_id in 1:nrow(doc_topic_distr_df)){
for(topic in 1:ncol(doc_topic_distr_df)){
tmp_topic_modeling_df <- data.frame('row_id' = row_id,
'topic' = topic,
'value' = doc_topic_distr_df[row_id,topic],stringsAsFactors = F)
topic_modeling_df <- rbind(topic_modeling_df,tmp_topic_modeling_df)
}
}
topic_modeling_df
nrow(topic_modeling_df)
is.na(topic_modeling_df)
topic_modeling_df[topic_modeling_df>0,]
topic_modeling_df[topic_modeling_df>0]
topic_modeling_df[topic_modeling_df>0,]
topic_modeling_df[topic_modeling_df>0.1,]
topic_modeling_df[topic_modeling_df[,3]>0,]
topic_modeling_df <- topic_modeling_df[topic_modeling_df[,3]>0,]
topic_modeling_df
covariateSettings$numberOfTopics
covariateSettings$numberOfTopics =10
topic_modeling_df
covariates.df$rowId
covariates.df
as.factor(covariates$rowId)
covariateId.factor
covariates
covariates$covariateId
covariateId.factor
covariates.df$rowId
as.factor(covariates$rowId)
seq(level(as.factor(covariates$rowId)))
seq(level(as.factor(covariates$rowId))
covariateRef  <- data.frame(covariateId = seq(levels(covariateId.factor)),
covariateName = levels(covariateId.factor),
analysisId = 1,
conceptId = 0)
covariateRef <- ff::as.ffdf(covariateRef)
}
if(covariateSettings$useGloVe == TRUE){
stop("useGlove has not not supported yet")
}
if(covariateSettings$useAutoencoder == TRUE){
stop("useAutoencoder has not not supported yet")
}
# Construct analysis reference:
analysisRef <- data.frame(analysisId = 1,
analysisName = "Features from Note",
domainId = "Note",
startDay = 0,
endDay = 0,
isBinary = "N",
missingMeansZero = "Y")
analysisRef <- ff::as.ffdf(analysisRef)
}
if (aggregated)
stop("Aggregation not supported")
# Construct analysis reference:
metaData <- list(sql = sql, call = match.call())
result <- list(covariates = covariates,
covariateRef = covariateRef,
analysisRef = analysisRef,
metaData = metaData)
class(result) <- "covariateData"
return(result)
}
seq(level(as.factor(covariates$rowId)))
as.factor(covariates$rowId)
seq(level(covariates.df$rowId))
seq(levels(as.factor(covariates$rowId)))
levels(as.factor(covariates$rowId))
topic_modeling_df
topic_modeling_df[1,]
topic_modeling_df
str(doc_topic_distr_df)
names(topic_modeling_df)
rownames(topic_modeling_df)
str(doc_topic_distr_df)
str(data)
dim(data)
seq(levels(as.factor(covariates$rowId)))
levels(as.factor(covariates$rowId))
topic_modeling_df
str(doc_topic_distr_df)
rownames(doc_topic_distr_df)
tran<-t(doc_topic_distr_df)
str(tran)
head(tran)
tran[1,2]
tran[1,3]
tran[1,3]==0
colnames(doc_topic_distr_df)
colnames(doc_topic_distr_df)<-as.numeric(colnames(doc_topic_distr_df))
doc_topic_distr_df <- data.frame(doc_topic_distr)
colnames(doc_topic_distr_df)<-as.character(as.numeric(colnames(doc_topic_distr_df)))
colnames(doc_topic_distr_df)
doc_topic_distr_df <- data.frame(doc_topic_distr)
str(doc_topic_distr_df)
colnames(doc_topic_distr_df)<-as.numeric(1:length(doc_topic_distr_df))
colnames(doc_topic_distr_df)
colnames(doc_topic_distr_df)<-as.character(as.numeric(1:length(doc_topic_distr_df)))
tran<-reshape2::melt(doc_topic_distr_df,id.var=as.character(as.numeric(1:length(doc_topic_distr_df))))
head(tran)
?melt
tran<-reshape2::melt(doc_topic_distr_df)
doc_topic_distr_df$rowId<-1:length(doc_topic_distr_d)
doc_topic_distr_df$rowId<-1:length(doc_topic_distr_df)
doc_topic_distr_df <- data.frame(doc_topic_distr)
colnames(doc_topic_distr_df)<-as.character(as.numeric(1:length(doc_topic_distr_df)))
doc_topic_distr_df$rowId<-1:nrow(doc_topic_distr_df)
tran<-reshape2::melt(doc_topic_distr_df,id.var = "rowId")
head(tran)
tran[(tran$rowId==1),]
head(doc_topic_distr_df)
seq(levels(as.factor(covariates$rowId)))
levels(as.factor(covariates$rowId))
seq(levels(covariateId.factor))
levels(covariateId.factor)
rowIds
head(covariates)
doc_topic_distr_df$rowId<-rowIds
rowIds<-seq(levels(as.factor(covariates$rowId)))
doc_topic_distr_df$rowId<-rowIds
head(doc_topic_distr_df)
doc_topic_distr_df<-reshape2::melt(doc_topic_distr_df,id.var = "rowId")
head(doc_topic_distr_df)
rowIds
rowIds<-levels(as.factor(covariates$rowId))
rowIds
doc_topic_distr_df <- data.frame(doc_topic_distr)
colnames(doc_topic_distr_df)<-as.character(as.numeric(1:length(doc_topic_distr_df)))
doc_topic_distr_df$rowId
doc_topic_distr_df$rowId<-rowIds
doc_topic_distr_df<-reshape2::melt(doc_topic_distr_df,id.var = "rowId")
head(doc_topic_distr_df)
doc_topic_distr_df <- data.frame(doc_topic_distr)
colnames(doc_topic_distr_df)<-as.character(as.numeric(1:length(doc_topic_distr_df)))
doc_topic_distr_df$rowId<-rowIds
doc_topic_distr_df<-reshape2::melt(doc_topic_distr_df,id.var = "rowId",
variable.name="covariateId",
value.name = "covariateValue")
head(doc_topic_distr_df)
covariateIds<-as.numeric(1:length(doc_topic_distr_df))
covariateIds<-as.numeric(1:length(doc_topic_distr_df))
past0("Topic",covariateIds)
paste0("Topic",covariateIds)
doc_topic_distr = text2vec::lda_model$fit_transform(x = data, n_iter = 1000,
convergence_tol = 0.001, n_check_convergence = 25,
progressbar = FALSE)
doc_topic_distr_df <- data.frame(doc_topic_distr)
doc_topic_distr = lda_model$fit_transform(x = data, n_iter = 1000,
convergence_tol = 0.001, n_check_convergence = 25,
progressbar = FALSE)
doc_topic_distr_df <- data.frame(doc_topic_distr)
covariateIds<-as.numeric(1:length(doc_topic_distr_df))
colnames(doc_topic_distr_df)<-covariateIds
doc_topic_distr_df$rowId<-rowIds
covariateIds
covariateName = paste0("Topic",covariateIds)
paste0("Topic",covariateIds)
library(CustomCovariateSetting)
#Prerequisites
library(KoNLP)
#Setting C:\Program Files\R\R-3.4.4\library\base\R/Profile.R
#RAM is more than 1024MB, fileEncoding = 'UTF-8'
#EX) options(java.parameters = c("-Xmx16384m","-Dfile.encoding=UTF-8"))
#devtools::install_github("parkdongsu/CustomCovariateSetting")
##Create Cohort
library(DatabaseConnector)
library(SqlRender)
library(FeatureExtraction)
library(PatientLevelPrediction)
workingFolder<- 'D:/Dongsu/NLP_Sample/R_CODE/CustomCovariateSetting'
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="atlas",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
cdmDatabaseSchema<-"Dolphin_CDM.dbo"
targetDatabaseSchema<-"Dolphin_CDM.dbo"
targetCohortTable<-"cohort"
targetCohortId <- 747
outcomeCohortId <- 748
cdmversion <- "5"
#CREATE TABLE & INPUT VALUE
#===========================================
# (T)
#===========================================
sql <- SqlRender::readSql(paste(workingFolder,'/inst/sql/sql_server/','all_admission.sql',sep = '')) #local
sql <- SqlRender::renderSql(sql,
cdm_database_schema=cdmDatabaseSchema,
target_database_schema=targetDatabaseSchema,
target_cohort_table=targetCohortTable,
target_cohort_id=targetCohortId
)$sql
sql <- SqlRender::translateSql(sql,
targetDialect=connectionDetails$dbms)$sql
DatabaseConnector::executeSql(connection,sql)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
noteConceptId = 44814637
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec = TRUE)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings)
#Prerequisites
library(KoNLP)
#Setting C:\Program Files\R\R-3.4.4\library\base\R/Profile.R
#RAM is more than 1024MB, fileEncoding = 'UTF-8'
#EX) options(java.parameters = c("-Xmx16384m","-Dfile.encoding=UTF-8"))
#devtools::install_github("parkdongsu/CustomCovariateSetting")
##Create Cohort
library(DatabaseConnector)
library(SqlRender)
library(FeatureExtraction)
library(PatientLevelPrediction)
workingFolder<- 'D:/Dongsu/NLP_Sample/R_CODE/CustomCovariateSetting'
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="atlas",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
cdmDatabaseSchema<-"Dolphin_CDM.dbo"
targetDatabaseSchema<-"Dolphin_CDM.dbo"
targetCohortTable<-"cohort"
targetCohortId <- 747
outcomeCohortId <- 748
cdmversion <- "5"
#CREATE TABLE & INPUT VALUE
#===========================================
# (T)
#===========================================
sql <- SqlRender::readSql(paste(workingFolder,'/inst/sql/sql_server/','all_admission.sql',sep = '')) #local
sql <- SqlRender::renderSql(sql,
cdm_database_schema=cdmDatabaseSchema,
target_database_schema=targetDatabaseSchema,
target_cohort_table=targetCohortTable,
target_cohort_id=targetCohortId
)$sql
sql <- SqlRender::translateSql(sql,
targetDialect=connectionDetails$dbms)$sql
DatabaseConnector::executeSql(connection,sql)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
noteConceptId = 44814637
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec = TRUE)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings)
#Prerequisites
library(KoNLP)
#Setting C:\Program Files\R\R-3.4.4\library\base\R/Profile.R
#RAM is more than 1024MB, fileEncoding = 'UTF-8'
#EX) options(java.parameters = c("-Xmx16384m","-Dfile.encoding=UTF-8"))
#devtools::install_github("parkdongsu/CustomCovariateSetting")
##Create Cohort
library(DatabaseConnector)
library(SqlRender)
library(FeatureExtraction)
library(PatientLevelPrediction)
workingFolder<- 'D:/Dongsu/NLP_Sample/R_CODE/CustomCovariateSetting'
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="atlas",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
cdmDatabaseSchema<-"Dolphin_CDM.dbo"
targetDatabaseSchema<-"Dolphin_CDM.dbo"
targetCohortTable<-"cohort"
targetCohortId <- 747
outcomeCohortId <- 748
cdmversion <- "5"
#CREATE TABLE & INPUT VALUE
#===========================================
# (T)
#===========================================
sql <- SqlRender::readSql(paste(workingFolder,'/inst/sql/sql_server/','all_admission.sql',sep = '')) #local
sql <- SqlRender::renderSql(sql,
cdm_database_schema=cdmDatabaseSchema,
target_database_schema=targetDatabaseSchema,
target_cohort_table=targetCohortTable,
target_cohort_id=targetCohortId
)$sql
sql <- SqlRender::translateSql(sql,
targetDialect=connectionDetails$dbms)$sql
DatabaseConnector::executeSql(connection,sql)
library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
noteConceptId = 44814637
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec = TRUE)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings)
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTextToVec = TRUE)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings)
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings)
traceback()
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings)
text2vec::LDA$new(n_topics = covariateSettings$numberOfTopics, doc_topic_prior = 0.1, topic_word_prior = 0.01)
covariateSettings$numberOfTopic
covariateSettings$numberOfTopics
Q
library(CustomCovariateSetting)
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
noteConceptId = 44814637
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE,
numberOfTopics = 10)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings)
#library(CustomCovariateSetting)
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
noteConceptId = 44814637
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE,
numberOfTopics = 10)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings)
options("fftempdir"="D:/temp")
connectionDetails<-DatabaseConnector::createConnectionDetails(dbms="sql server",
server="128.1.99.58",
schema="Dolphin_CDM.dbo",
user="dspark",
password="qwer1234!@")
connection <- DatabaseConnector::connect(connectionDetails)
connectionDetails <-connectionDetails
connection <- connection
oracleTempSchema = NULL
cdmDatabaseSchema <- 'Dolphin_CDM.dbo'
targetDatabaseSchema<-"Dolphin_CDM.dbo"
resultsDatabaseSchema<-"Dolphin_CDM.dbo"
cohortTable <- 'cohort'
cohortId = 747
noteConceptId = 44814637
cdmVersion = "5"
rowIdField = "subject_id"
covariateSettings <- createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE,
numberOfTopics = 10)
covariates <- getTopicFromNoteSettings(connection = connection,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortId = cohortId,
noteConceptId = 44814637,
covariateSettings = covariateSettings)
covariates$covariates
library(PatientLevelPrediction)
covariateSettings <- FeatureExtraction::createCovariateSettings(useDemographicsGender = TRUE,
useDemographicsAgeGroup = TRUE,
useDemographicsRace = TRUE,
useDemographicsEthnicity = TRUE,
useDemographicsIndexYear = TRUE,
useDemographicsIndexMonth = TRUE)
noteCovSet <-  createTopicFromNoteSettings(useTopicFromNote = TRUE,
useDictionary = TRUE,
useTopicModeling = TRUE,
numberOfTopics = 10)
covariateSettingsList <- list(covariateSettings, noteCovSet)
covariates <- getDbCovariateData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortDatabaseSchema = resultsDatabaseSchema,
cohortTable = "cohort",
cohortId = 747,
covariateSettings = covariateSettingsList)
traceback()
covariateSettingsList <- list(covariateSettings)
covariates <- getDbCovariateData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortDatabaseSchema = resultsDatabaseSchema,
cohortTable = "cohort",
cohortId = 747,
covariateSettings = covariateSettingsList)
covariates <-  FeatureExtraction::getDbCovariateData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
cohortDatabaseSchema = resultsDatabaseSchema,
cohortTable = "cohort",
cohortId = 747,
covariateSettings = covariateSettingsList)
covariateSettingsList <- list(covariateSettings), noteCovSet)
covariateSettingsList <- list(covariateSettings, noteCovSet)
plpData <- getPlpData(connectionDetails = connectionDetails,
cdmDatabaseSchema = cdmDatabaseSchema,
oracleTempSchema = oracleTempSchema,
cohortDatabaseSchema = cohortsDatabaseSchema,
cohortTable = "",
cohortId = 747,
washoutPeriod = 0,
covariateSettings = covariateSettingsList,
outcomeDatabaseSchema = cohortsDatabaseSchema,
outcomeTable = "",
outcomeIds = 748,
cdmVersion = cdmVersion)
